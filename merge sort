import pyglet
from pyglet import shapes
from random import sample

def merge_sort_animation_frames(arr):
    frames = []

    def merge_sort(arr, start, end):
        if end <= start:
            return

        mid = start + ((end - start + 1) // 2) - 1
        merge_sort(arr, start, mid)
        merge_sort(arr, mid + 1, end)
        merge(arr, start, mid, end)
        frames.append(arr.copy())

    def merge(arr, start, mid, end):
        merged = []
        leftIdx = start
        rightIdx = mid + 1

        while leftIdx <= mid and rightIdx <= end:
            if arr[leftIdx] < arr[rightIdx]:
                merged.append(arr[leftIdx])
                leftIdx += 1
            else:
                merged.append(arr[rightIdx])
                rightIdx += 1

        while leftIdx <= mid:
            merged.append(arr[leftIdx])
            leftIdx += 1

        while rightIdx <= end:
            merged.append(arr[rightIdx])
            rightIdx += 1

        for i in range(len(merged)):
            arr[start + i] = merged[i]

    merge_sort(arr, 0, len(arr) - 1)
    frames.append(arr.copy())

    return frames

window = pyglet.window.Window(width=1500, height=700)

array_to_sort = sample(range(1, 101), 60)

animation_frames = merge_sort_animation_frames(array_to_sort.copy())

batch = pyglet.graphics.Batch()

compared_color = (200, 162, 200)
normal_color = (128, 128, 0)

@window.event
def on_draw():
    window.clear()

    for i, value in enumerate(array_to_sort):
        color = compared_color if animation_frames and animation_frames[0][i] == value else normal_color
        shapes.Rectangle(i * 10 + 30, 30, 10, value * 3, color=color, batch=batch).draw()

def update(dt):
    global array_to_sort, animation_frames

    if animation_frames:
        array_to_sort = animation_frames.pop(0)
    else:
        pyglet.app.exit()

pyglet.clock.schedule_interval(update, 0.2)

pyglet.app.run()
